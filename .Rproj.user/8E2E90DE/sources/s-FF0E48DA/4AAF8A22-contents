---
title: "Roteiro_base"
author: "Emanuel Cordeiro"
date: "12/18/2022"
output: html_document
---

## Importar e Combinar dataframes

```{r include=FALSE}
# importar planilha para o objetivo variables
# df_copia1 <- df
# df <- df_copia1
variables <- read_xlsx("Variables.xlsx")
```

Nesse caso, temos o dataframe `variables`, com a informação de cinco variáveis dos mesmos sujeitos que constam no dataframe `df`.
Então, gostaríamos de juntar esses dois dataframes.
Para isso podemos usar duas funções.

```{r}
# Juntar a planilha importada no dataframe df
saveRDS(df,"df.rds")
df <- cbind(df,variables)
```

## Lidando com dados ausentes

A função `na.omit` deleta as informações de uma linha inteira que contenha ao menos uma informação ausente.\

A função `na.exclude` faz quase a mesma coisa, mas apenas omite a linha e acaba reportando alguns resultados, como resíduos, por exemplo, em análises de regressão.
Além disso, também preserva o número de linhas do dataframe.
Isso é importante em certas ocasiões que se deseja manter constante o número de linhas de um dataframe para coincidir com outro dataframe, por exemplo.

```{r}
na.omit(df)
na.exclude(df)
```

Uma outra forma de lidar com dados ausentes (NA) é através de um argumento que geralmente é utilizado dentro de funções estatísticas ou gráficos para sinalizar que os valores NA devem ser ignorados. Esse argumento é o `na.rm`, que é um argumento lógico, ou seja deve ser apresentado como `na.rm = TRUE` ou `na.rm = FALSE`. Veja a aplicação desse argumento na função `mean()`, utilizada para calcular médias.

```{r}
# mean(df$idade)    # essa função acaba não rodando, porque entre os dados de idade existe um NA
mean(df$idade, na.rm = TRUE) # dessa forma, conseguimos rodar a análise.
```

# Função `ifelse()`

A função `ifelse()` é bastante útil para a manipulação de dados.
Ela deve ser escrita da seguinte forma: `ifelse("condição", "se sim", "se não")` Traduzindo: observe a condição... se ela ocorrer, faça isso... se ela não ocorrer, faça aquilo.
Exemplos:

```{r}
# se quisermos classificar a renda em dois grupos: menor igual a R$2000 e maior que R$2000, podemos usar a função ifelse()
# ifelse(condição,se sim, se não)
# traduzindo....
# observe se, na variável renda, o valor é menor ou igual a 2000
# se for, então atribua 1
# se não for, então atribua 2.
ifelse(df$renda <= 2000,1,2)
# Se quisermos salvar esses dados como uma coluna do df...
df$renda_cod <- ifelse(df$renda <= 2000,1,2)
# se quisermos criar uma coluna atribuindo 1 para homens e 0 para os demais.
ifelse(df$sexo == "masculino",1,0)
# se quisermos identificar homens com escolaridade fundamental
ifelse(df$sexo == "masculino" & df$escolaridade == "fundamental",1,0)
# se quisermos identificar homens com escolaridade fundamental OU pessoa casadas.
ifelse(df$sexo == "masculino" & df$escolaridade == "fundamental" | df$estado_civil == "casado/a",1,0)
# se quisermos criar uma nova variável atribuindo 1 para solteiro, 2 para casado e 3 para viúvo... tínhamos visto o formato
#df$escolaridade[df$escolaridade == "fundamental"] <- 1
#df$escolaridade[df$escolaridade == "médio"] <- 2
#df$escolaridade[df$escolaridade == "superior"] <- 3
df$escola_cod <- ifelse(df$escolaridade == "fundamental",1,
                        ifelse(df$escolaridade == "médio",2,3))
ifelse(df$v1 == 1,5,
       ifelse(df$v1 == 2,4,
              ifelse(df$v1 == 3,3,
                     ifelse(df$v1 == 4,2,1))))
# Também é possível recodificar variáveis de jeito mais fácil, usando uma função do pacote expss.
# Note que há questões no sentido de uma boa adaptação aos estudos e frases no sentido contrário. Nesses casos, não podemos somar os itens diretamente porque um valor 5 em v1 significa má adaptação, enquanto o mesmo valor 5  significa boa adaptação em v2. Então, não podemos somar coisas que têm significados diferentes.
# Para lidar com isso, geralmente, fazemos a inversão de itens que estão na direção contrária do que queremos avaliar. Por exemplo, se queremos avaliar "adaptação escolar", então invertemos os itens v1 e v5, que estão na direção contrária.
# Inverter significa transformar 1 em 5, 2 em 4, 3 em 3, 4 em 2 e 5 em 1. 
# Para isso, usamos a função recode() do expss.
recode(df[ ,c("v1","v2","v3","v4","v5")]) <- c(1~5,2~4,3~3,4~2,5~1)
recode(df[ ,c("v1","v5")]) <- c(1~5,2~4,3~3,4~2,5~1)
```


## rowSums() e rowMeans()

```{r}
## calcular pontuações das pessoas em um conjunto de itens.
## vamos supor que v1, v2 e v5 formam a pontuação em um fator
## e que v3 e v4 formam a pontuação em outro fator
## se quisermos calcular a somatória das pontuações nesses dois fatores, podemos usar:
df %>% select(v1,v2,v5) %>% rowSums()
## para salvar esses resultados em uma nova coluna no dataframe df, basta usar df$nome
df$sum1 <- df %>% select(v1,v2,v5) %>% rowSums()
df$sum2 <- df %>% select(v3,v4) %>% rowSums()
## podemos calcular essas pontuações pela média nos itens ao invés da somatória
df$mean1 <- df %>% select(v1,v2,v5) %>% rowMeans() %>% round(digits = 1)
df$mean2 <- df %>% select(v3,v4) %>% rowMeans()
```

## count()

```{r}
# contar casos dentro de uma variável. 
# Função útil, por exemplo, para descrever a amostra.
# dependendo de como se escreve essa função ela dá um tipo de informação.
count(df) # se colocar apenas o nome do dataframe, retorna o número de casos total
count(df,sexo) # especificando uma varíável, retorna o número de casos dentro da variável
count(df,sexo,escolaridade) # comando igual a df %>% group_by(sexo) %>% count(escolaridade)
# para acrescentar uma coluna com as respectivas porcentagens
df %>% count(sexo) %>% mutate(porc = n/sum(n)*100)
df %>% count(sexo,escolaridade) %>% mutate(porc = n/sum(n)*100)
```

## Estatísticas de tendência central e de disperção

A função `rowMeans()` calcula a média de algumas variáveis em uma **linha**.\
Se quisermos calcular a média e o desvio padrão dos valores de uma **coluna** (variável), temos que usar as funções `mean()` e `sd()`.\
Outras medidas de tendência central são a mediana e a moda .

```{r}
# média das pontuações as variáveis "idade", "renda_total", "escore".
mean(df$idade)
# ao rodar essa análise, notei que a variável "idade" está como character
# ou seja, os valores numéricos estão sendo entendidos como texto
# então, precisamos fazer uma transformação dessa variável em numérica.
df$idade <- as.numeric(as.character(df$idade))
# agora, rodar novamente a média
mean(df$idade, na.rm = TRUE) # na coluna idade, há um valor de idade não informado (NA)
                             # o comando precisa informar que os NAs devem ser removidos
                             # por isso o comando "na.rm = TRUE"
# procedimento semelhante para o cálculo do desvio padrão.
sd(df$idade, na.rm = TRUE)
# mediana
median(df$idade,na.rm = TRUE)
# moda
count(df,escore)
```